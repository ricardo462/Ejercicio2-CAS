clear
close all
clc
%%
data1 = readtable("DATA1.xlsx");
data2 = readtable("DATA2.xlsx");

velocidad = data1(:, "VelocidadReal_m_s_");
Entrada = velocidad{:, 1};


potencia = data1(:, "PotenciaEn23kV_MW_");
Salida = potencia{:, 1};


%% Salida
figure(1)
hold on
title('Salida Fenomenológica')
xlabel('Velocidad')
ylabel('Potencia')
plot(Entrada,Salida, 'bx')
%% Conjuntos de datos de entrenamiento(60%), test(30%) y validacion(10%)
%{
L=length(Entrada);
L1=round(L*0.6);%->60% datos
L2=round(L*0.9);%->90% datos
%}
%% Entrenamiento
%Se separan los datos en los tres conjuntos.
%{
%Entrenamiento
InEnt=Entrada(1:L1-1,2);% 60% de los datos
OutEnt=Salida(1:L1-1,2);


Test
InTest=Entrada(L1:L2-1,2);% 30& Test
OutTest=Salida(L1:L2-1,2);

%Validacion 
IntVal=Entrada(L2:L,2);% 10& Validacion
OutVal=Salida(L2:L,2);
%}

%Generación de objetos iddata. 

IdEnt=iddata(Salida,Entrada,1);
%IdTest=iddata(OutTest,InTest,1);
%IdVal=iddata(OutVal,IntVal,1);

%% FORMATO XY
%Obtención de las matriz X y el vector Y con los datos de entrada y salida.
Y=Salida(4:L1,2); % Resultado y(t) 
u1=Entrada(3:L1-1,2); % u(t-1) 
u2=Entrada(2:L1-2,2); % u(t-2) 
u3=Entrada(1:L1-3,2); % u(t-3) 
y1=Salida(3:L1-1,2); % y(t-1)
y2=Salida(2:L1-2,2); % y(t-2)
y3=Salida(1:L1-3,2); % y(t-3)

X = [y1 y2 y3 u1 u2 u3];

%%
%P = X\Y resuelve el sistema de ecs. lineales X*P = Y.
P = X\Y;
%P=(X'*X)^(-1)*X'*Y;
A = P(1:length(P)/2)';
B = P(length(P)/2+1:length(P))';
%% Compare XY con data
%Compara el polinomio obtenido para el modelo, con la data real.
sys0 = idpoly ([1 -A],B);  %-A?
compare(IdVal,sys0,1)

%% modelo ARX
%Se exploran distintas estructuras (variando la cantidad de regresores) para cada modelo.
n_ARX = struc(1:3,1:3,1:2); % na nb nk
k_ARX = length(n_ARX(:,1));

clear fit
for i=1:k_ARX
    model = arx(IdEnt,n_ARX(i,:),'IntegrateNoise',[0]);
    [y_est,mape(i)]=compare(IdTest,model); %Se estima la salida y se guarda el fit.
end

[a, i]=min(mape); %Se queda el que tiene mejor fit. 
modelarx = arx(IdEnt,n_ARX(i,:),'IntegrateNoise',[0]);
%% Modelo ARIX
clear fit
for i=1:k_ARX
    model = arx(IdEnt,n_ARX(i,:),'IntegrateNoise',1); %Si 'IntegrateNoise' = 1, es un modelo ARIX.
    [y_est,mape(i)]=compare(IdTest,model);
end

[a, i]=min(mape);
modelarix = arx(IdEnt,n_ARX(i,:),'IntegrateNoise',[1]);
%% Modelo ARMAX
n_ARMAX = struc(1:3,1:3,1:3,1:2);
k_ARMAX = length(n_ARMAX(:,1));

clear fit
for i=1:k_ARMAX
    model = armax(IdEnt,n_ARMAX(i,:));
    [y_est,mape(i)]=compare(IdTest,model);
end

[a, i]=min(mape);
modelarmax = armax(IdEnt,n_ARMAX(i,:));

%% Con fines pedagógicos, se supondrá que el modelo ARX tiene mejores metricas
%% Predicción a 1 y 10 pasos.
% Para 1 paso:
figure(3)
[ye,a]=compare(IdVal,modelarx,1); %Se compara el modelarx con los datos de validación.
ye=get(ye);
y=get(IdVal);
ye2=cell2mat(ye.OutputData);
y2=cell2mat(y.OutputData);
hold on
plot([ye2 y2])
legend('Estimado','Real')
title('Salida real y salida estimada modelo ARX a 1 paso')
xlabel('Muestras k')
ylabel('y')
%Se entregan métricas para evaluar el desempeño del modelo.
mae_ARX_1=mae(ye2,y2)
fit_1=a


%%
%Se repite el procedimiento a 10 pasos.
figure(4)
[ye,a]=compare(IdVal,modelarx,10);
ye=get(ye);
y=get(IdVal);
ye2=cell2mat(ye.OutputData);
y2=cell2mat(y.OutputData);
hold on
plot([ye2 y2])
legend('Estimado','Real')
title('Salida real y salida estimada modelo ARX a 10 paso')
xlabel('Muestras k')
ylabel('Y')
mae_ARX_10=mae(ye2,y2)
fit_10=a



